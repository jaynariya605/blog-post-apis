type Query {
    users(query: String): [User!]!
    posts(query: String, skip: Int, take: Int): [Post!]!
    comments: [Comment!]!
    post(id: String!):Post
    me: User!
    myPosts(query: String):[Post!]!
}

type Mutation {
    createUser(data: CreteUserInput): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput) :User!
    loginUser(email:String!, password:String!): AuthPayload!
    createPost(data: CretePostInput): Post!
    deletePost(id: String!):Post!
    updatePost(id: String!, data: UpdatePostInput): Post!
    createComment(data: CreteCommentInput): Comment!
    deleteComment(id: String!): Comment!
}

type Subscription {
    comment(postId: String!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: Post!
}

type AuthPayload {
    token: String!
    user: User!
}
input UpdateUserInput {
    name: String
    email: String
    age:Int
    password: String
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreteUserInput {
    name: String! 
    email: String!
    password: String! 
    age: Int
}

input CretePostInput {
    title: String! 
    body: String!
    published: Boolean!
}

input CreteCommentInput {
    text: String!  
    postId:String!
}

type User {
    id: String!
    name: String!
    email: String
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
    createdAt: String!
    updatedAt: String!
}

type Post {
    id: String!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments:[Comment!]
    createdAt: String!
    updatedAt: String!
}

type Comment {
    id: String!
    text: String!
    author: User!
    post: Post!
    createdAt: String!
    updatedAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    data: Post!
    mutation:MutationType!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}